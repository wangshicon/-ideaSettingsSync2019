<application>
  <component name="AppStorage">
    <histories>
      <item value="优惠" />
      <item value="get Act District List By Level" />
      <item value="领取的" />
      <item value="领取" />
      <item value="待付款" />
      <item value="Reports any calls to specific methods where the result of that call is ignored. Method calls inspected are: Calls to simple getters (which do nothing except return a field) Calls to methods specified in the settings of this inspection Calls to Methods annotated with org.jetbrains.annotations.Contract(pure=true) Calls to Methods annotated with .*.CheckReturnValue Calls to Methods located in a class annotated with javax.annotation.CheckReturnValue Calls to Methods located in a package annotated with javax.annotation.CheckReturnValue Optionally all calls to non-library methods For calls to many methods ignoring the result is perfectly legitimate, but for some methods it is almost certainly an error. Examples of methods where ignoring the result of a call is likely to be an error include java.io.inputStream.read(), which returns the number of bytes actually read and any method on java.lang.String or java.math.BigInteger, as all of those methods are side-effect free and thus pointless if ignored." />
      <item value="order Existed Status" />
      <item value="orderExistedStatus" />
      <item value="已存在" />
      <item value="已存在的" />
      <item value="已经存在" />
      <item value="Bought order Status" />
      <item value="orderBoughtStatus" />
      <item value="已购买过" />
      <item value="已购买的" />
      <item value="order bought" />
      <item value="order" />
      <item value="已经购买" />
      <item value="购买过" />
      <item value="是否购买" />
      <item value="parser features" />
      <item value="This method deserializes the specified Json into an object of the specified class. It is not * suitable to use if the specified class is a generic type since it will not have the generic * type information because of the Type Erasure feature of Java. Therefore, this method should not * be used if the desired type is a generic type. Note that this method works fine if the any of * the fields of the specified object are generics, just the object itself should not be a * generic type. For the cases when the object is of generic type, invoke * {@link #parseObject(String, Type, Feature[])}. If you have the Json in a {@link InputStream} instead of * a String, use {@link #parseObject(InputStream, Type, Feature[])} instead." />
      <item value="转换到" />
      <item value="转换" />
      <item value="满足" />
      <item value="达标" />
      <item value="exception unwrapping private key - java.security.InvalidKeyException: Illegal key size" />
      <item value="AY" />
      <item value="Map&lt;String, String&gt; params = SignUtils.paraFilter(map)" />
      <item value="Lord" />
      <item value="idleTimeout has been set but has no effect because the pool is operating as a fixed size pool" />
      <item value="No operations allowed after connection closed" />
      <item value="JD ASYNC AREA MARK" />
      <item value="Current Operator" />
      <item value="addition" />
      <item value="lock Time" />
      <item value="default" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="20" />
        <entry key="ENGLISH" value="21" />
        <entry key="CHINESE_TRADITIONAL" value="1" />
        <entry key="FILIPINO" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="overrideFont" value="true" />
    <option name="primaryFontFamily" value="Microsoft YaHei UI" />
  </component>
</application>