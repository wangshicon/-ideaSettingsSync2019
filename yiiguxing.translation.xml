<application>
  <component name="AppStorage">
    <histories>
      <item value="/** * The number of times this list has been &lt;i&gt;structurally modified&lt;/i&gt;. * Structural modifications are those that change the size of the * list, or otherwise perturb it in such a fashion that iterations in * progress may yield incorrect results. * * &lt;p&gt;This field is used by the iterator and list iterator implementation * returned by the {@code iterator} and {@code listIterator} methods. * If the value of this field changes unexpectedly, the iterator (or list * iterator) will throw a {@code ConcurrentModificationException} in * response to the {@code next}, {@code remove}, {@code previous}, * {@code set} or {@code add} operations. This provides * &lt;i&gt;fail-fast&lt;/i&gt; behavior, rather than non-deterministic behavior in * the face of concurrent modification during iteration. * * &lt;p&gt;&lt;b&gt;Use of this field by subclasses is optional.&lt;/b&gt; If a subclass * wishes to provide fail-fast iterators (and list iterators), then it * merely has to increment this field in its {@code add(int, E)} and * {@code remove(int)} methods (and any other methods that it overrides * that result in structural modifications to the list). A single call to * {@code add(int, E)} or {@code remove(int)} must add no more than * one to this field, or the iterators (and list iterators) will throw * bogus {@code ConcurrentModificationExceptions}. If an implementation * does not wish to provide fail-fast iterators, this field may be * ignored." />
      <item value="Increments modCount!!" />
      <item value="More formally, returns the highest index &lt;tt&gt;i&lt;/tt&gt; such that" />
      <item value="Returns the index of the last occurrence of the specified element * in this list, or -1 if this list does not contain the element." />
      <item value="The size of the ArrayList (the number of elements it contains)." />
      <item value="See below for * TreeNode subclass, and in LinkedHashMap for its Entry subclass" />
      <item value="Basic hash bin node, used for most entries" />
      <item value="WAP PAY" />
      <item value="change template too frequently" />
      <item value="please enable new custom service, or wait for a while if you have enabled hint: [eGobfbMre-0K8F_] rid: 60616f34-73e9df22-342bc238" />
      <item value="installment Count" />
      <item value="fail" />
      <item value="微信下单" />
      <item value="where" />
      <item value="未处理" />
      <item value="未发起" />
      <item value="积分" />
      <item value="date format" />
      <item value="* Fills in the execution stack trace. This method records within this * {@code Throwable} object information about the current state of * the stack frames for the current thread. * * &lt;p&gt;If the stack trace of this {@code Throwable} {@linkplain * Throwable#Throwable(String, Throwable, boolean, boolean) is not * writable}, calling this method has no effect. * * @return a reference to this {@code Throwable} instance. * @see java.lang.Throwable#printStackTrace()" />
      <item value="企业" />
      <item value="企业事项" />
      <item value="优惠" />
      <item value="get Act District List By Level" />
      <item value="领取的" />
      <item value="领取" />
      <item value="待付款" />
      <item value="Reports any calls to specific methods where the result of that call is ignored. Method calls inspected are: Calls to simple getters (which do nothing except return a field) Calls to methods specified in the settings of this inspection Calls to Methods annotated with org.jetbrains.annotations.Contract(pure=true) Calls to Methods annotated with .*.CheckReturnValue Calls to Methods located in a class annotated with javax.annotation.CheckReturnValue Calls to Methods located in a package annotated with javax.annotation.CheckReturnValue Optionally all calls to non-library methods For calls to many methods ignoring the result is perfectly legitimate, but for some methods it is almost certainly an error. Examples of methods where ignoring the result of a call is likely to be an error include java.io.inputStream.read(), which returns the number of bytes actually read and any method on java.lang.String or java.math.BigInteger, as all of those methods are side-effect free and thus pointless if ignored." />
      <item value="order Existed Status" />
      <item value="orderExistedStatus" />
      <item value="已存在" />
      <item value="已存在的" />
      <item value="已经存在" />
      <item value="Bought order Status" />
      <item value="orderBoughtStatus" />
      <item value="已购买过" />
      <item value="已购买的" />
      <item value="order bought" />
      <item value="order" />
      <item value="已经购买" />
      <item value="购买过" />
      <item value="是否购买" />
      <item value="parser features" />
      <item value="This method deserializes the specified Json into an object of the specified class. It is not * suitable to use if the specified class is a generic type since it will not have the generic * type information because of the Type Erasure feature of Java. Therefore, this method should not * be used if the desired type is a generic type. Note that this method works fine if the any of * the fields of the specified object are generics, just the object itself should not be a * generic type. For the cases when the object is of generic type, invoke * {@link #parseObject(String, Type, Feature[])}. If you have the Json in a {@link InputStream} instead of * a String, use {@link #parseObject(InputStream, Type, Feature[])} instead." />
      <item value="转换到" />
      <item value="转换" />
      <item value="满足" />
      <item value="达标" />
      <item value="exception unwrapping private key - java.security.InvalidKeyException: Illegal key size" />
      <item value="AY" />
      <item value="Map&lt;String, String&gt; params = SignUtils.paraFilter(map)" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="34" />
        <entry key="ENGLISH" value="35" />
        <entry key="CHINESE_TRADITIONAL" value="1" />
        <entry key="FILIPINO" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="overrideFont" value="true" />
    <option name="primaryFontFamily" value="Microsoft YaHei UI" />
  </component>
</application>